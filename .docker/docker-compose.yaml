version: '3.8'

services:
  api1: &api
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: api1
    hostname: api1
    environment:
      API_PORT: 3001
      API_JOB_BATCH_SIZE: ${API_JOB_BATCH_SIZE}
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      DB_CONNECTION_POOL: ${DB_CONNECTION_POOL}
    depends_on:
      - db
    restart: on-failure
    networks:
      - general
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          cpus: '1.25'
          memory: '1GB'
        reservations:
          cpus: '0.75'
          memory: '0.5GB'
    tty: true
    env_file:
      - ../.env

  api2:
    <<: *api
    container_name: api2
    hostname: api2
    environment:
      API_PORT: 3002

  load_balancer:
    image: docker.io/nginx:latest
    hostname: load_balancer
    command: [ "nginx", "-g", "daemon off;" ]
    volumes:
      - ../nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    networks:
      - general
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: '0.3GB'

  db:
    image: docker.io/postgres
    hostname: db
    environment:
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: postgres -c 'max_connections=450'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 15s
    volumes:
      - db_data:/var/lib/postgresql/data
      - ../postgresql.conf:/docker-entrypoint-initdb.d/postgresql.conf
    networks:
      - general
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '1.7GB'
    env_file:
      - ../.env

volumes:
  db_data:
    driver: local

networks:
  general:
    driver: bridge
